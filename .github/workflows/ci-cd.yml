name: CI & CD
# NOTE: CI -> Continuous Integration
# NOTE: CD -> Continuous Delivery

on:
    pull_request:
        branches: [main]
        types: [opened, ready_for_review, reopened, synchronize]
    push:
        branches: [main]
    workflow_dispatch:
        inputs:
            reason:
                description: Reason of re-running this workflow
                required: false
                type: string

concurrency:
    group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
    cancel-in-progress: true

defaults:
    run:
        shell: bash

env:
    CI: true

permissions:
    contents: write
    id-token: write
    pages: write
    pull-requests: write

jobs:
    build_packages:
        name: Build
        uses: ./.github/workflows/build.yml
        secrets: inherit

    changed_files:
        name: Get changed files
        runs-on: macos-14
        timeout-minutes: 1
        outputs:
            files: ${{ steps.files.outputs.all_changed_files }}
            has_astro: ${{ steps.astro.outputs.has_astro }}
            has_html: ${{ steps.html.outputs.has_html }}
            has_js: ${{ steps.js.outputs.has_js }}
            has_json: ${{ steps.json.outputs.has_json }}
            has_md: ${{ steps.md.outputs.has_md }}
            has_mdx: ${{ steps.mdx.outputs.has_mdx }}
            has_svelte: ${{ steps.svelte.outputs.has_svelte }}
            has_ts: ${{ steps.ts.outputs.has_ts }}
        steps:
            # https://github.com/actions/checkout
            - uses: actions/checkout@v4
              # https://github.com/tj-actions/changed-files
            - uses: tj-actions/changed-files@v44.5.7
              id: files
              with:
                  escape_json: false
                  json: true
            - name: Set output 'has_astro'
              id: astro
              run: echo "has_astro=$(echo '${{ steps.files.outputs.all_changed_files }}' | jq 'any(. | endswith(".astro"))')" >> "$GITHUB_OUTPUT"
            - name: Set output 'has_html'
              id: html
              run: echo "has_html=$(echo '${{ steps.files.outputs.all_changed_files }}' | jq 'any(. | endswith(".html"))')" >> "$GITHUB_OUTPUT"
            - name: Set output 'has_js'
              id: js
              run: echo "has_js=$(echo '${{ steps.files.outputs.all_changed_files }}' | jq 'any(. | endswith(".js"))')" >> "$GITHUB_OUTPUT"
            - name: Set output 'has_json'
              id: json
              run: echo "has_json=$(echo '${{ steps.files.outputs.all_changed_files }}' | jq 'any(. | endswith(".json"))')" >> "$GITHUB_OUTPUT"
            - name: Set output 'has_md'
              id: md
              run: echo "has_md=$(echo '${{ steps.files.outputs.all_changed_files }}' | jq 'any(. | endswith(".md"))')" >> "$GITHUB_OUTPUT"
            - name: Set output 'has_mdx'
              id: mdx
              run: echo "has_mdx=$(echo '${{ steps.files.outputs.all_changed_files }}' | jq 'any(. | endswith(".mdx"))')" >> "$GITHUB_OUTPUT"
            - name: Set output 'has_svelte'
              id: svelte
              run: echo "has_svelte=$(echo '${{ steps.files.outputs.all_changed_files }}' | jq 'any(. | endswith(".svelte"))')" >> "$GITHUB_OUTPUT"
            - name: Set output 'has_ts'
              id: ts
              run: echo "has_ts=$(echo '${{ steps.files.outputs.all_changed_files }}' | jq 'any(. | endswith(".ts"))')" >> "$GITHUB_OUTPUT"

    lint_biome:
        name: Lint
        uses: shan-shan-dev/.github/.github/workflows/biome.yml@main
        needs: [changed_files]
        if: needs.changed_files.outputs.has_js == 'true' || needs.changed_files.outputs.has_json == 'true' || needs.changed_files.outputs.has_ts == 'true'

    lint_inlang:
        name: Lint
        uses: ./.github/workflows/inlang.yml

    lint_markdownlint:
        name: Lint
        uses: shan-shan-dev/.github/.github/workflows/markdownlint.yml@main
        needs: [changed_files]
        if: needs.changed_files.outputs.has_md == 'true' || needs.changed_files.outputs.has_mdx == 'true'

    lint_prettier:
        name: Lint
        uses: shan-shan-dev/.github/.github/workflows/prettier.yml@main
        needs: [changed_files]
        if: needs.changed_files.outputs.has_astro == 'true' || needs.changed_files.outputs.has_html == 'true' || needs.changed_files.outputs.has_svelte == 'true'

    lint_size_limit:
        name: Lint
        uses: ./.github/workflows/size-limit.yml
        needs: [build_packages]
        if: github.event_name == 'pull_request' && github.event.pull_request.draft == false

    lint_typos:
        name: Lint
        uses: shan-shan-dev/.github/.github/workflows/typos.yml@main

    test_vitest:
        name: Test
        uses: ./.github/workflows/vitest.yml
        needs: [build_packages]
        if: github.event.pull_request.draft == false
        secrets: inherit

    publish_chromatic:
        name: Publish
        uses: ./.github/workflows/chromatic.yml
        needs: [build_packages]
        if: github.event.pull_request.draft == false
        secrets: inherit

    publish_typedoc:
        name: Publish
        uses: ./.github/workflows/typedoc.yml
        needs: [build_packages]
        if: github.event.pull_request.draft == false
        with:
            type: ${{ github.event_name == 'pull_request' && contains(fromJson('["opened", "reopened", "synchronize"]'), github.event.action) && 'pr-preview' || 'deploy' }}

    release:
        name: Release
        uses: ./.github/workflows/changesets.yml
        needs:
            [
                lint_biome,
                lint_inlang,
                lint_markdownlint,
                lint_prettier,
                lint_typos,
                build_packages,
                publish_chromatic,
                publish_typedoc,
                test_vitest,
            ]
        if: |
            github.event_name == 'push' &&
            github.event.ref == 'refs/heads/main'
